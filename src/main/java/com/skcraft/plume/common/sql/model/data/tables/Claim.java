/**
 * This class is generated by jOOQ
 */
package com.skcraft.plume.common.sql.model.data.tables;


import com.skcraft.plume.common.sql.model.data.Data;
import com.skcraft.plume.common.sql.model.data.Keys;
import com.skcraft.plume.common.sql.model.data.tables.records.ClaimRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Claim extends TableImpl<ClaimRecord> {

	private static final long serialVersionUID = 23058951;

	/**
	 * The reference instance of <code>data.claim</code>
	 */
	public static final Claim CLAIM = new Claim();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ClaimRecord> getRecordType() {
		return ClaimRecord.class;
	}

	/**
	 * The column <code>data.claim.server</code>.
	 */
	public final TableField<ClaimRecord, String> SERVER = createField("server", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>data.claim.world</code>.
	 */
	public final TableField<ClaimRecord, String> WORLD = createField("world", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>data.claim.x</code>.
	 */
	public final TableField<ClaimRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>data.claim.z</code>.
	 */
	public final TableField<ClaimRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>data.claim.owner_id</code>.
	 */
	public final TableField<ClaimRecord, Integer> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>data.claim.party_name</code>.
	 */
	public final TableField<ClaimRecord, String> PARTY_NAME = createField("party_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>data.claim.issue_time</code>.
	 */
	public final TableField<ClaimRecord, Date> ISSUE_TIME = createField("issue_time", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * Create a <code>data.claim</code> table reference
	 */
	public Claim() {
		this("claim", null);
	}

	/**
	 * Create an aliased <code>data.claim</code> table reference
	 */
	public Claim(String alias) {
		this(alias, CLAIM);
	}

	private Claim(String alias, Table<ClaimRecord> aliased) {
		this(alias, aliased, null);
	}

	private Claim(String alias, Table<ClaimRecord> aliased, Field<?>[] parameters) {
		super(alias, Data.DATA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ClaimRecord> getPrimaryKey() {
		return Keys.KEY_CLAIM_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ClaimRecord>> getKeys() {
		return Arrays.<UniqueKey<ClaimRecord>>asList(Keys.KEY_CLAIM_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ClaimRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ClaimRecord, ?>>asList(Keys.FK_CLAIM_OWNER_ID, Keys.FK_CLAIM_PARTY_NAME);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Claim as(String alias) {
		return new Claim(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Claim rename(String name) {
		return new Claim(name, null);
	}
}
