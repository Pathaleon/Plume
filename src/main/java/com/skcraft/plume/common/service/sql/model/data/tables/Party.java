/**
 * This class is generated by jOOQ
 */
package com.skcraft.plume.common.service.sql.model.data.tables;


import com.skcraft.plume.common.service.sql.model.data.Data;
import com.skcraft.plume.common.service.sql.model.data.Keys;
import com.skcraft.plume.common.service.sql.model.data.tables.records.PartyRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Party extends TableImpl<PartyRecord> {

	private static final long serialVersionUID = 860019037;

	/**
	 * The reference instance of <code>data.party</code>
	 */
	public static final Party PARTY = new Party();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PartyRecord> getRecordType() {
		return PartyRecord.class;
	}

	/**
	 * The column <code>data.party.name</code>.
	 */
	public final TableField<PartyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>data.party.create_time</code>.
	 */
	public final TableField<PartyRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * Create a <code>data.party</code> table reference
	 */
	public Party() {
		this("party", null);
	}

	/**
	 * Create an aliased <code>data.party</code> table reference
	 */
	public Party(String alias) {
		this(alias, PARTY);
	}

	private Party(String alias, Table<PartyRecord> aliased) {
		this(alias, aliased, null);
	}

	private Party(String alias, Table<PartyRecord> aliased, Field<?>[] parameters) {
		super(alias, Data.DATA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PartyRecord> getPrimaryKey() {
		return Keys.KEY_PARTY_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PartyRecord>> getKeys() {
		return Arrays.<UniqueKey<PartyRecord>>asList(Keys.KEY_PARTY_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Party as(String alias) {
		return new Party(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Party rename(String name) {
		return new Party(name, null);
	}
}
