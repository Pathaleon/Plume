/**
 * This class is generated by jOOQ
 */
package com.skcraft.plume.common.service.sql.model.data.tables.records;


import com.skcraft.plume.common.service.sql.model.data.tables.Ban;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BanRecord extends UpdatableRecordImpl<BanRecord> implements Record10<Integer, Integer, Timestamp, Integer, String, String, Byte, Timestamp, Integer, String> {

	private static final long serialVersionUID = -1711293464;

	/**
	 * Setter for <code>data.ban.id</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>data.ban.id</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>data.ban.user_id</code>.
	 */
	public void setUserId(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>data.ban.user_id</code>.
	 */
	public Integer getUserId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>data.ban.issue_time</code>.
	 */
	public void setIssueTime(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>data.ban.issue_time</code>.
	 */
	public Timestamp getIssueTime() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>data.ban.issue_by</code>.
	 */
	public void setIssueBy(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>data.ban.issue_by</code>.
	 */
	public Integer getIssueBy() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>data.ban.server</code>.
	 */
	public void setServer(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>data.ban.server</code>.
	 */
	public String getServer() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>data.ban.reason</code>.
	 */
	public void setReason(String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>data.ban.reason</code>.
	 */
	public String getReason() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>data.ban.heuristic</code>.
	 */
	public void setHeuristic(Byte value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>data.ban.heuristic</code>.
	 */
	public Byte getHeuristic() {
		return (Byte) getValue(6);
	}

	/**
	 * Setter for <code>data.ban.expire_time</code>.
	 */
	public void setExpireTime(Timestamp value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>data.ban.expire_time</code>.
	 */
	public Timestamp getExpireTime() {
		return (Timestamp) getValue(7);
	}

	/**
	 * Setter for <code>data.ban.pardon_by</code>.
	 */
	public void setPardonBy(Integer value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>data.ban.pardon_by</code>.
	 */
	public Integer getPardonBy() {
		return (Integer) getValue(8);
	}

	/**
	 * Setter for <code>data.ban.pardon_reason</code>.
	 */
	public void setPardonReason(String value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>data.ban.pardon_reason</code>.
	 */
	public String getPardonReason() {
		return (String) getValue(9);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record10 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row10<Integer, Integer, Timestamp, Integer, String, String, Byte, Timestamp, Integer, String> fieldsRow() {
		return (Row10) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row10<Integer, Integer, Timestamp, Integer, String, String, Byte, Timestamp, Integer, String> valuesRow() {
		return (Row10) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Ban.BAN.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Ban.BAN.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Ban.BAN.ISSUE_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return Ban.BAN.ISSUE_BY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return Ban.BAN.SERVER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field6() {
		return Ban.BAN.REASON;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Byte> field7() {
		return Ban.BAN.HEURISTIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field8() {
		return Ban.BAN.EXPIRE_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field9() {
		return Ban.BAN.PARDON_BY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field10() {
		return Ban.BAN.PARDON_REASON;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getIssueTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getIssueBy();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getServer();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value6() {
		return getReason();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Byte value7() {
		return getHeuristic();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value8() {
		return getExpireTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value9() {
		return getPardonBy();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value10() {
		return getPardonReason();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value2(Integer value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value3(Timestamp value) {
		setIssueTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value4(Integer value) {
		setIssueBy(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value5(String value) {
		setServer(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value6(String value) {
		setReason(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value7(Byte value) {
		setHeuristic(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value8(Timestamp value) {
		setExpireTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value9(Integer value) {
		setPardonBy(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord value10(String value) {
		setPardonReason(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BanRecord values(Integer value1, Integer value2, Timestamp value3, Integer value4, String value5, String value6, Byte value7, Timestamp value8, Integer value9, String value10) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		value10(value10);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached BanRecord
	 */
	public BanRecord() {
		super(Ban.BAN);
	}

	/**
	 * Create a detached, initialised BanRecord
	 */
	public BanRecord(Integer id, Integer userId, Timestamp issueTime, Integer issueBy, String server, String reason, Byte heuristic, Timestamp expireTime, Integer pardonBy, String pardonReason) {
		super(Ban.BAN);

		setValue(0, id);
		setValue(1, userId);
		setValue(2, issueTime);
		setValue(3, issueBy);
		setValue(4, server);
		setValue(5, reason);
		setValue(6, heuristic);
		setValue(7, expireTime);
		setValue(8, pardonBy);
		setValue(9, pardonReason);
	}
}
